name: PR Checks

on:
  push:
    branches: [main, master]
  pull_request:
    branches:
      - '**' # Trigger on all branches

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  PLAYWRIGHT_SKIP_BROWSER_GC: 1

jobs:
  pr_checks:
    name: Run PR Checks
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up pnpm
      - uses: pnpm/action-setup@v4
        name: Install NodeJS dependency manager (PNPM)
        with:
          version: 9
          run_install: false

      # Set up Node.js
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install dependencies
      - name: Install dependencies
        run: pnpm install

      # SvelteKit Sync
      - name: SvelteKit Sync
        run: pnpm sync

      # SvelteKit Build
      - name: SvelteKit Build
        run: pnpm build

      # Run Svelte checks
      - name: Run Svelte checks
        run: pnpm check:svelte

      # Check linting (ESLint)
      - name: Check linting (ESLint)
        run: pnpm check:lint

      # Check formatting
      - name: Check formatting (Prettier)
        run: pnpm check:format

      # Run unit tests (Vitest)
      - name: Run unit tests (Vitest)
        run: pnpm test:unit

      # Figures out the version of playwright that's installed.
      - name: Get installed Playwright version
        id: playwright-version
        run: echo -n "::set-output name=version::$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')"

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - uses: actions/cache@v4
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # Run E2E tests (Playwright)
      - name: Run E2E Tests
        run: pnpm test:e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
